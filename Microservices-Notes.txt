
-------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>> Microservices ---->>>>>>>>>>>>>>>>>>>>>>>>>>>>>

https://github.com/in28minutes/spring-microservices-v2/blob/main/03.microservices/01-step-by-step-changes/microservices-v2-1.md#step-19   -->Debugging Guide - Microservices - V2

1. limit-service :- read data from application.properties using @ConfigurationProperties("limits-service") - configuration class
    http://localhost:8080/limits  --O/P--> {"minimum": 0,"maximum": 999} => value from application.properties
	
2. spring-cloud-config-server :- it's a config server, it connect with git to read config properties using spring.cloud.config.server.git.uri=file://D:/My-Works/microservices-practice-project/git-localconfig-repo
    http://localhost:8888/limits-service/default or http://localhost:8888/limits-service/dev or http://localhost:8888/limits-service/qa
	
3. connect limit-service to spring-cloud-config-server :- 
    a) add <!-- Config Client --> dependency in pom of limit-service 
    b)spring.config.import=optional:configserver:http://localhost:8888 in application.properties of limit-service (if cloud-config-server is mandatory for limit-service, then remove optional)
    c)spring.application.name=limits-service so from git repo it will read data start with limit-service
	after restart http://localhost:8080/limits --O/P--> {"minimum": 0,"maximum": 999} => value from limit-service properties defined in git repo.(a/c to active profile mentioned in limit-service pom)
	We have created three files in git repo limits-service, limits-service-dev & limits-service-qa 
	## To Fetch properties from corresponding limits-service-dev.properties file
        spring.cloud.config.profile=dev  in limit-service pom

   Similarly, we can create properties for diffrent microservices like limit-service. So, biggest advantage of it is all config peroperties are centralized at 1 place.
   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
------->>>>>>>>>>>Communication b/w microservices -load balancing, circuit breaker ,.......

4. currency-exchange-service :- at 8000 and 8001(using Run Config (-Dserver.port=8001)) 
    http://localhost:8000/h2-console/  -- for h2 db

5. currency-conversion-service :- at 8100

6. Invoking currency-exchange-service from currency-conversion-service :- using Rest Template

7. Invoking currency-exchange-service from currency-conversion-service :- using Feign Rest Client -- it makes easier to call 1 microservice in other microservice 
    a) add dependency in pom of currency-conversion-service 
	b) 
	
8. Naming server : Eureka Naming Server :- Previously we need to change the url as url was hardcoded (let say if we were using localhost:8000 
                   but 8000 is busy so we want to use 8001, but here we need to change the code), using naming server it will auto load balance mean it will 
				   dynamically assign the running port.
	a) eureka server dependency in pom of naming server
	b) @EnableEurekaServer along with @SpringBootApplication
	
9) api-gateway  (Spring Cloud API Gateway) :- 
    a) Eureka Discovery Client dependency in pom 
	b) Gateway dependency in pom
	
  